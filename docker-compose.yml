version: '3.8'

services:
  # 数据库服务
  database:
    image: mysql:8.0
    container_name: sports-activity-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_DATABASE:-sports_activity}
      MYSQL_USER: ${DB_USERNAME:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apppassword}
    volumes:
      - db_data:/var/lib/mysql
      - ./Backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 后端API服务
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: sports-activity-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME:-appuser}
      DB_PASSWORD: ${DB_PASSWORD:-apppassword}
      DB_DATABASE: ${DB_DATABASE:-sports_activity}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      PORT: 7001
    volumes:
      - backend_logs:/app/logs
      - backend_data:/app/data
    ports:
      - "7001:7001"
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Web服务
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: sports-activity-frontend
    restart: unless-stopped
    ports:
      - "80:8080"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: sports-activity-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
    driver: local
  backend_logs:
    driver: local
  backend_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
